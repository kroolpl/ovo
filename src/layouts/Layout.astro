---
import '../styles/base.css';
import ThemeToggle from '../components/ThemeToggle.astro';
import { getSession } from 'auth-astro/server';

interface Props {
	title: string;
}

interface ExtendedUser {
	name?: string | null;
	email?: string | null;
	image?: string | null;
	role?: string;
}

interface ExtendedSession {
	user?: ExtendedUser;
	expires: string;
}

const { title } = Astro.props;
const session = await getSession(Astro.request) as ExtendedSession | null;

// Define types for window augmentation
declare global {
	interface Window {
		signIn: (provider?: string) => Promise<void>;
		signOut: () => Promise<void>;
	}
}
---

<!doctype html>
<html lang="pl">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Platforma do dzielenia się opowiadaniami" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <script is:inline>
      if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    </script>
  </head>
  <body class="min-h-screen bg-white dark:bg-gray-900 transition-colors duration-200">
    <nav class="bg-white/80 dark:bg-gray-800/50 backdrop-blur-lg border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-16">
          <div class="flex items-center space-x-8">
            <a href="/" class="text-xl font-display text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition">
              Opowiadania
            </a>
            <div class="flex items-center space-x-4">
              <a href="/" class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition font-medium">
                Strona główna
              </a>
              <a href="/submit" class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition font-medium">
                Dodaj opowiadanie
              </a>
            </div>
          </div>
          <div class="flex items-center space-x-4">
            <ThemeToggle />
            {session ? (
              <div class="flex items-center gap-4">
                {session.user?.image && (
                  <img 
                    src={session.user.image} 
                    alt={session.user.name || ''} 
                    class="w-8 h-8 rounded-full"
                  />
                )}
                <div class="text-sm">
                  <p class="text-gray-700 dark:text-gray-300">{session.user?.name}</p>
                  {session.user?.role === 'admin' && (
                    <a href="/admin" class="text-blue-600 dark:text-blue-400 text-xs">
                      Panel admina
                    </a>
                  )}
                </div>
                <button 
                  onclick="window.signOut()"
                  class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 cursor-pointer"
                >
                  Wyloguj się
                </button>
              </div>
            ) : (
              <button 
                onclick="window.signIn('google')"
                class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 cursor-pointer"
              >
                Zaloguj się
              </button>
            )}
          </div>
        </div>
      </div>
    </nav>
    <slot />

    <script>
      import { signIn, signOut } from 'auth-astro/client';
      
      // Make auth functions available globally with proper types
      window.signIn = async (provider?: string) => {
        await signIn(provider);
      };
      
      window.signOut = async () => {
        await signOut();
      };
    </script>
  </body>
</html>
